package model.view;

import model.entity.PAuditeurImpl;

import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 25 13:29:30 EDT 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PCoordonneesViewRowImpl
  extends ViewRowImpl
{
  public static final int ENTITY_PCOORDONNEES = 0;
  public static final int ENTITY_PAUDITEUR = 1;

  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
   */
  public enum AttributesEnum
  {
    Nocoord
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getNocoord();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setNocoord((Integer)value);
      }
    }
    ,
    Rue
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getRue();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setRue((String)value);
      }
    }
    ,
    Ville
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getVille();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setVille((String)value);
      }
    }
    ,
    CodePostal
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getCodePostal();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setCodePostal((String)value);
      }
    }
    ,
    Noregion
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getNoregion();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setNoregion((Integer)value);
      }
    }
    ,
    Telephone
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getTelephone();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setTelephone((String)value);
      }
    }
    ,
    Cell
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getCell();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setCell((String)value);
      }
    }
    ,
    Courriel
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getCourriel();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setCourriel((String)value);
      }
    }
    ,
    PAuditeurView
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getPAuditeurView();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setAttributeInternal(index(), value);
      }
    }
    ,
    PEcoleView
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getPEcoleView();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setAttributeInternal(index(), value);
      }
    }
    ,
    PExpoView
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getPExpoView();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setAttributeInternal(index(), value);
      }
    }
    ,
    PExposantView
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getPExposantView();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setAttributeInternal(index(), value);
      }
    }
    ,
    PRegionView1
    {
      public Object get(PCoordonneesViewRowImpl obj)
      {
        return obj.getPRegionView1();
      }

      public void put(PCoordonneesViewRowImpl obj, Object value)
      {
        obj.setAttributeInternal(index(), value);
      }
    }
    ;
    private static AttributesEnum[] vals = null;
    private static int firstIndex = 0;

    public abstract Object get(PCoordonneesViewRowImpl object);

    public abstract void put(PCoordonneesViewRowImpl object, Object value);

    public int index()
    {
      return AttributesEnum.firstIndex() + ordinal();
    }

    public static int firstIndex()
    {
      return firstIndex;
    }

    public static int count()
    {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    public static AttributesEnum[] staticValues()
    {
      if (vals == null)
      {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }
  public static final int NOCOORD = AttributesEnum.Nocoord.index();
  public static final int RUE = AttributesEnum.Rue.index();
  public static final int VILLE = AttributesEnum.Ville.index();
  public static final int CODEPOSTAL = AttributesEnum.CodePostal.index();
  public static final int NOREGION = AttributesEnum.Noregion.index();
  public static final int TELEPHONE = AttributesEnum.Telephone.index();
  public static final int CELL = AttributesEnum.Cell.index();
  public static final int COURRIEL = AttributesEnum.Courriel.index();
  public static final int PAUDITEURVIEW = AttributesEnum.PAuditeurView.index();
  public static final int PECOLEVIEW = AttributesEnum.PEcoleView.index();
  public static final int PEXPOVIEW = AttributesEnum.PExpoView.index();
  public static final int PEXPOSANTVIEW = AttributesEnum.PExposantView.index();
  public static final int PREGIONVIEW1 = AttributesEnum.PRegionView1.index();

  /**
   * This is the default constructor (do not remove).
   */
  public PCoordonneesViewRowImpl()
  {
  }

  /**
   * Gets PCoordonnees entity object.
   * @return the PCoordonnees
   */
  public EntityImpl getPCoordonnees()
  {
    return (EntityImpl) getEntity(ENTITY_PCOORDONNEES);
  }

  /**
   * Gets PAuditeur entity object.
   * @return the PAuditeur
   */
  public PAuditeurImpl getPAuditeur()
  {
    return (PAuditeurImpl) getEntity(ENTITY_PAUDITEUR);
  }

  /**
   * Gets the attribute value for NOCOORD using the alias name Nocoord.
   * @return the NOCOORD
   */
  public Integer getNocoord()
  {
    return (Integer) getAttributeInternal(NOCOORD);
  }

  /**
   * Sets <code>value</code> as attribute value for NOCOORD using the alias name Nocoord.
   * @param value value to set the NOCOORD
   */
  public void setNocoord(Integer value)
  {
    setAttributeInternal(NOCOORD, value);
  }

  /**
   * Gets the attribute value for RUE using the alias name Rue.
   * @return the RUE
   */
  public String getRue()
  {
    return (String) getAttributeInternal(RUE);
  }

  /**
   * Sets <code>value</code> as attribute value for RUE using the alias name Rue.
   * @param value value to set the RUE
   */
  public void setRue(String value)
  {
    setAttributeInternal(RUE, value);
  }

  /**
   * Gets the attribute value for VILLE using the alias name Ville.
   * @return the VILLE
   */
  public String getVille()
  {
    return (String) getAttributeInternal(VILLE);
  }

  /**
   * Sets <code>value</code> as attribute value for VILLE using the alias name Ville.
   * @param value value to set the VILLE
   */
  public void setVille(String value)
  {
    setAttributeInternal(VILLE, value);
  }

  /**
   * Gets the attribute value for CODE_POSTAL using the alias name CodePostal.
   * @return the CODE_POSTAL
   */
  public String getCodePostal()
  {
    return (String) getAttributeInternal(CODEPOSTAL);
  }

  /**
   * Sets <code>value</code> as attribute value for CODE_POSTAL using the alias name CodePostal.
   * @param value value to set the CODE_POSTAL
   */
  public void setCodePostal(String value)
  {
    setAttributeInternal(CODEPOSTAL, value);
  }

  /**
   * Gets the attribute value for NOREGION using the alias name Noregion.
   * @return the NOREGION
   */
  public Integer getNoregion()
  {
    return (Integer) getAttributeInternal(NOREGION);
  }

  /**
   * Sets <code>value</code> as attribute value for NOREGION using the alias name Noregion.
   * @param value value to set the NOREGION
   */
  public void setNoregion(Integer value)
  {
    setAttributeInternal(NOREGION, value);
  }

  /**
   * Gets the attribute value for TELEPHONE using the alias name Telephone.
   * @return the TELEPHONE
   */
  public String getTelephone()
  {
    return (String) getAttributeInternal(TELEPHONE);
  }

  /**
   * Sets <code>value</code> as attribute value for TELEPHONE using the alias name Telephone.
   * @param value value to set the TELEPHONE
   */
  public void setTelephone(String value)
  {
    setAttributeInternal(TELEPHONE, value);
  }

  /**
   * Gets the attribute value for CELL using the alias name Cell.
   * @return the CELL
   */
  public String getCell()
  {
    return (String) getAttributeInternal(CELL);
  }

  /**
   * Sets <code>value</code> as attribute value for CELL using the alias name Cell.
   * @param value value to set the CELL
   */
  public void setCell(String value)
  {
    setAttributeInternal(CELL, value);
  }

  /**
   * Gets the attribute value for COURRIEL using the alias name Courriel.
   * @return the COURRIEL
   */
  public String getCourriel()
  {
    return (String) getAttributeInternal(COURRIEL);
  }

  /**
   * Sets <code>value</code> as attribute value for COURRIEL using the alias name Courriel.
   * @param value value to set the COURRIEL
   */
  public void setCourriel(String value)
  {
    setAttributeInternal(COURRIEL, value);
  }

  /**
   * Gets the associated <code>RowIterator</code> using master-detail link PAuditeurView.
   */
  public RowIterator getPAuditeurView()
  {
    return (RowIterator) getAttributeInternal(PAUDITEURVIEW);
  }

  /**
   * Gets the associated <code>RowIterator</code> using master-detail link PEcoleView.
   */
  public RowIterator getPEcoleView()
  {
    return (RowIterator) getAttributeInternal(PECOLEVIEW);
  }

  /**
   * Gets the associated <code>RowIterator</code> using master-detail link PExpoView.
   */
  public RowIterator getPExpoView()
  {
    return (RowIterator) getAttributeInternal(PEXPOVIEW);
  }

  /**
   * Gets the associated <code>RowIterator</code> using master-detail link PExposantView.
   */
  public RowIterator getPExposantView()
  {
    return (RowIterator) getAttributeInternal(PEXPOSANTVIEW);
  }

  /**
   * Gets the view accessor <code>RowSet</code> PRegionView1.
   */
  public RowSet getPRegionView1()
  {
    return (RowSet) getAttributeInternal(PREGIONVIEW1);
  }

  /**
   * getAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param attrDef the attribute

   * @return the attribute value
   * @throws Exception
   */
  protected Object getAttrInvokeAccessor(int index,
                                         AttributeDefImpl attrDef)
    throws Exception
  {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
    {
      return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

  /**
   * setAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param value the value to assign to the attribute
   * @param attrDef the attribute

   * @throws Exception
   */
  protected void setAttrInvokeAccessor(int index, Object value,
                                       AttributeDefImpl attrDef)
    throws Exception
  {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
    {
      AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
  }
}
